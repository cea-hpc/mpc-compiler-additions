diff -Naur binutils-2.27/bfd/elf64-x86-64.c mpc-binutils-2.27/bfd/elf64-x86-64.c
--- binutils-2.27/bfd/elf64-x86-64.c	2016-08-03 09:36:51.000000000 +0200
+++ mpc-binutils-2.27/bfd/elf64-x86-64.c	2017-03-31 15:28:04.487899938 +0200
@@ -1268,6 +1268,20 @@
 /* Return TRUE if the TLS access code sequence support transition
    from R_TYPE.  */
 
+/*MPC BEGIN */
+#define extls_is_tls(str) (strncmp(str, "__sctk__tls_get_addr_", 21) == 0 /* old API call */ \
+                        || strncmp(str, "__extls_get_addr_", 17) == 0)   /* new EXTLS call */
+
+/* this #define allow to inject Hexa code to offset GS with the desired TLS level */
+#define extls_memcpy(a, b, c) do{\
+unsigned char* start = a;\
+memcpy(start, b, c);\
+start[5] = '\x00' + (extls_scope_offset & 255); \
+start[6] = '\x00' + (extls_scope_offset >> 8);\
+}while(0)
+
+/* MPC END */
+
 static bfd_boolean
 elf_x86_64_check_tls_transition (bfd *abfd,
 				 struct bfd_link_info *info,
@@ -1437,8 +1451,7 @@
 	    {
 	      /* Use strncmp to check __tls_get_addr since
 		 __tls_get_addr may be versioned.  */
-	      if (strncmp (h->root.root.string, "__tls_get_addr", 14)
-		  == 0)
+	      if (strncmp (h->root.root.string, "__tls_get_addr", 14) == 0 || extls_is_tls(h->root.root.string)) 
 		{
 		  eh->tls_get_addr = 1;
 		  tls_get_addr = TRUE;
@@ -1558,6 +1571,9 @@
   switch (from_type)
     {
     case R_X86_64_TLSGD:
+    /* This allows the mpc_cc driver to disable TLS optimization */
+    if( getenv("MPC_DISABLE_TLS_OPT") || getenv("EXTLS_ENABLE_VALGRIND")  )
+        return TRUE;
     case R_X86_64_GOTPC32_TLSDESC:
     case R_X86_64_TLSDESC_CALL:
     case R_X86_64_GOTTPOFF:
@@ -4987,6 +5003,103 @@
 					   &r_type, tls_type, rel,
 					   relend, h, r_symndx, TRUE))
 	    return FALSE;
+	  
+	  /* MPC BEGIN */
+	  unsigned short int extls_scope_offset = -1;
+	/* check if the current symbol is handled by extls */
+	{
+	  unsigned long extls_r_symndx;
+	  struct elf_link_hash_entry *extls_h=NULL;
+
+	  /* big extls array to reproduce possible emitted TLS symbols
+	   * This array is two dimensional to support backward compatibility with old symbol names
+	   */
+	  unsigned long long call_idx;
+	  const unsigned long long nb_calls = 12;
+	  const unsigned long long nb_APIs = 2;
+	  char *extls_scopes[2][12] = {
+		 {
+			 "__extls_get_addr_process",
+			 "__extls_get_addr_task",
+			 "__extls_get_addr_thread",
+			 "__extls_get_addr_openmp",
+			 "__extls_get_addr_node",
+			 "__extls_get_addr_numa_level_2",
+			 "__extls_get_addr_numa_level_1",
+			 "__extls_get_addr_socket",
+			 "__extls_get_addr_cache_level_3",
+			 "__extls_get_addr_cache_level_2",
+			 "__extls_get_addr_cache_level_1",
+			 "__extls_get_addr_core"
+		 },
+
+		 {
+			 "__sctk__tls_get_addr__process_scope",
+			 "__sctk__tls_get_addr__task_scope",
+			 "__sctk__tls_get_addr__thread_scope",
+			 "__sctk__tls_get_addr__openmp_scope",
+			 "__sctk__tls_get_addr__node_scope",
+			 "__sctk__tls_get_addr__numa_level_2_scope",
+			 "__sctk__tls_get_addr__numa_level_1_scope",
+			 "__sctk__tls_get_addr__socket_scope",
+			 "__sctk__tls_get_addr__cache_level_3_scope",
+			 "__sctk__tls_get_addr__cache_level_2_scope",
+			 "__sctk__tls_get_addr__cache_level_1_scope",
+			 "__sctk__tls_get_addr__core"
+		 }
+	  };
+
+	  /* it is probably possible to optimized these nested "if"s */
+	  if ( (rel+1) < relend ) {
+		  extls_r_symndx = ELF64_R_SYM (rel[1].r_info);
+		  if (extls_r_symndx >= symtab_hdr->sh_info) {
+			  extls_h = sym_hashes[extls_r_symndx - symtab_hdr->sh_info];
+			  if ( extls_h != NULL && extls_is_tls(extls_h->root.root.string)){ 
+				  unsigned long long fidx;
+				  unsigned short int found = 0;
+				  for ( fidx = 0 ; fidx < nb_APIs && !found ; ++fidx ) {
+					  for ( call_idx = 0 ; call_idx < nb_calls && !found; ++call_idx ) {
+						  if ( strcmp ( extls_h->root.root.string,  extls_scopes[fidx][call_idx]) == 0)
+						  {
+							  found = 1;
+						  }
+					  }
+				  }
+
+
+				  if(!found || call_idx < 0 || call_idx >= nb_calls) /* handling errors */
+				  {
+					  /* get variable name for error message */
+					  const char* name ;
+					  const char unknown_str[16] = "unknown" ;
+					  if ( h && h->root.root.string )
+						  name = h->root.root.string ;
+					  else
+						  name = bfd_elf_sym_name (input_bfd, symtab_hdr, sym, NULL) ;
+					  if ( name == NULL )
+						  name = unknown_str ;
+
+					  (*_bfd_error_handler)
+						  (_("%B(%A+0x%lx): Undefined EXTLS level for the symbol '%s'"), input_bfd, input_section, name);
+					  bfd_set_error (bfd_error_bad_value);
+					  return FALSE;
+				  } 
+                                 else 
+                                 { call_idx--; /* remove extra incerment done when found */ }
+
+				  extls_scope_offset = call_idx * (5*8); /* a level is built w/ a 5-pointer structure */
+				
+				  /* check that computed offset will fit with 'extls_scope_offset' size (initially: unsigned short int) */
+				  if((call_idx * (5*8)) >= (1 << (sizeof(extls_scope_offset) * 8)))
+				  {
+				  	(*_bfd_error_handler)
+						  (_("%B(%A+0x%lx): A symbol requires an offset larger than currently implemented offset capability (%d bytes)"), input_bfd, input_section, sizeof(extls_scope_offset));
+				  }
+			  } /* close extls symbol check */
+		  } /* close sym index lookup */
+	  } /* close (rel+1) < relend check */
+	} /* close a local block to unstack tabs */
+/* MPC END */
 
 	  if (r_type == R_X86_64_TPOFF32)
 	    {
@@ -5030,7 +5143,13 @@
 			leaq foo@tpoff(%rax), %rax
 			nopw 0x0(%rax,%rax,1)  */
 		  int largepic = 0;
-		  if (ABI_64_P (output_bfd))
+		  if(extls_scope_offset != (unsigned short int) -1)
+		  {
+			  extls_memcpy(contents + roff - 4,
+					  "\x65\x48\x8b\x04\x25\0\0\0\0\x48\x8d\x80\0\0\0",
+					  16);
+		  }
+		  else if (ABI_64_P (output_bfd))
 		    {
 		      if (contents[roff + 5] == 0xb8)
 			{
@@ -5321,7 +5440,13 @@
 			addq foo@gottpoff(%rax), %rax
 			nopw 0x0(%rax,%rax,1)  */
 		  int largepic = 0;
-		  if (ABI_64_P (output_bfd))
+		  if(extls_scope_offset != (unsigned short int) -1)
+		  {
+			  extls_memcpy(contents + roff - 4,
+					  "\x65\x48\x8b\x04\x25\0\0\0\0\x48\x03\x05\0\0\0",
+					  16);
+		  }
+		  else if (ABI_64_P (output_bfd))
 		    {
 		      if (contents[roff + 5] == 0xb8)
 			{
diff -Naur binutils-2.27/bfd/elflink.c mpc-binutils-2.27/bfd/elflink.c
--- binutils-2.27/bfd/elflink.c	2016-08-03 09:36:51.000000000 +0200
+++ mpc-binutils-2.27/bfd/elflink.c	2017-03-31 14:44:38.057590760 +0200
@@ -2011,6 +2011,34 @@
   return TRUE;
 }
 
+/* MPC BEGIN */
+static bfd_boolean
+_bfd_elf_export_mpc_dyn_tls_wrapper (struct elf_link_hash_entry *h, void *data)
+{
+	struct elf_info_failed *eif = (struct elf_info_failed *) data;
+
+  /* Ignore indirect symbols.  These are added by the versioning code.  */
+	if (h->root.type == bfd_link_hash_indirect)
+		return TRUE;
+
+	const char * name = h->root.root.string;
+
+	if( !name )
+		return TRUE;
+	
+	if( !strstr( name, "___mpc_TLS_w_" ) )
+		return TRUE;
+
+	if (! bfd_elf_link_record_dynamic_symbol (eif->info, h))
+	{
+		eif->failed = TRUE;
+		return FALSE;
+	}
+
+	return TRUE;
+}
+/* MPC END */
+
 /* Look through the symbols which are defined in other shared
    libraries and referenced here.  Update the list of version
    dependencies.  This will be put into the .gnu.version_r section.
@@ -5987,7 +6015,18 @@
 	  if (eif.failed)
 	    return FALSE;
 	}
-
+	
+	/* MPC BEGIN */
+	 /* Here we export the dynamic TLS symbols
+	  * in order to allow remote TU intializer
+	  * resolution */
+	  elf_link_hash_traverse (elf_hash_table (info),
+			  _bfd_elf_export_mpc_dyn_tls_wrapper,
+			  &eif);
+	  if (eif.failed)
+	    return FALSE;
+	/* MPC END */
+	
       /* Make all global versions with definition.  */
       for (t = info->version_info; t != NULL; t = t->next)
 	for (d = t->globals.list; d != NULL; d = d->next)
diff -Naur binutils-2.27/ld/ldfile.c mpc-binutils-2.27/ld/ldfile.c
--- binutils-2.27/ld/ldfile.c	2016-08-03 09:36:54.000000000 +0200
+++ mpc-binutils-2.27/ld/ldfile.c	2017-03-31 14:44:38.057590760 +0200
@@ -336,18 +336,35 @@
      directory first.  */
   if (!entry->flags.maybe_archive)
     {
+        /* MPC INTEL BEGIN */
+#if 0
       if (entry->flags.sysrooted && IS_ABSOLUTE_PATH (entry->filename))
+#endif
+      /* For absolute pathnames, try to always open the file in the
+	 sysroot first. If this fails, try to open the file at the
+	 given location. */
+      entry->flags.sysrooted = is_sysrooted_pathname(entry->filename);
+      if (IS_ABSOLUTE_PATH (entry->filename) && ld_sysroot && ! entry->flags.sysrooted)
+          /* MPC INTEL END */
 	{
 	  char *name = concat (ld_sysroot, entry->filename,
 			       (const char *) NULL);
 	  if (ldfile_try_open_bfd (name, entry))
 	    {
 	      entry->filename = name;
+          /* MPC INTEL BEGIN */
+	      entry->flags.sysrooted = TRUE;
+          /* MPC INTEL END */
 	      return TRUE;
 	    }
 	  free (name);
 	}
+      /* MPC INTEL BEGIN */
+#if 0
       else if (ldfile_try_open_bfd (entry->filename, entry))
+#endif
+      if (ldfile_try_open_bfd (entry->filename, entry))
+          /* MPC INTEL END */
 	return TRUE;
 
       if (IS_ABSOLUTE_PATH (entry->filename))
