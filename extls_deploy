#!/bin/sh
SOURCE_PREFIX=$PWD/`dirname $0`
BUILD_PREFIX=$PWD/build
INSTALLATION_PREFIX=$BUILD_PREFIX/install
COMPILATION_PREFIX=
RUNTIME_PREFIX=
DEBUG_MODE=yes
COLOR_SUPPORT=no
MAKE_J=1
EXTRA_ARGS=
SPACK_ALLOWED="no"

extls_arg_parse()
{
	echo "x$1" | sed -e "s@^x$2@@g"
}

extls_printf()
{
	printf " $@\n"
}

extls_help()
{
	extls_printf "==============> EXTLS CONFIGURE HELP <============"
	extls_printf 
	extls_printf "-------- PREFIX --------"
	extls_printf " --prefix          set installation prefix"
	extls_printf " --tmpdir          set build prefix (GCC & Binutils tarball decompression)"
	extls_printf 
	extls_printf "-------- OTHERS --------"
	extls_printf " --enable-debug    Activate debug mode for all components"
	#extls_printf " --debug-symbols   Add '-g' for debugging symbols"
	extls_printf " -j<val>           Set a concurrency level to build a component"
	extls_printf " --enable-color    Activate color support in components (if any)"
	extls_printf " --spack           Rely on Spack to build the compiler"
	extls_printf " --help            Display this help"
	extls_printf 
	extls_printf "=================================================="
}

extls_error(){
	extls_help
	extls_printf "EXTLS Configure Error: $@"
	exit 1
}

extls_print_config()
{
	extls_printf "============> EXTLS CONFIGURE SUMMARY <==========="
	extls_printf "- Install Prefix     : $INSTALLATION_PREFIX"
	extls_printf "- Build Prefix       : $BUILD_PREFIX"
	extls_printf "- Debug Mode         : $DEBUG_MODE"
	extls_printf "- Color Support      : $COLOR_SUPPORT"
	extls_printf "- Make concurrency   : $MAKE_J"
	extls_printf "- Root directory     : $ROOT_DIRECTORY"
}

for arg in $@
do
	case $arg in
		-j*)
			MAKE_J="`extls_arg_parse "$arg" "-j"`"
			;;
		--prefix=*)
			INSTALLATION_PREFIX="`extls_arg_parse "$arg" "--prefix="`"
			;;
		--tmpdir=*)
			BUILD_PREFIX=""`extls_arg_parse "$arg" "--tmpdir="`""
			;;
		--enable-debug|-d)
			DEBUG_MODE=yes
			;;
		--disable-debug)
			DEBUG_MODE=no
			;;
		--enable-color)
			COLOR_SUPPORT=yes
			;;
		--spack)
			SPACK_ALLOWED=yes
			;;
		--help|-help|-h|--h)
			extls_help
			exit 0
			;;
		*)
		    extls_error "Unkown argument: '$arg'"
			exit 1
			;;
	esac
done

extls_print_config

__get_root_extract()
{
	tar tzf "$1" | head -1 | sed -e "s/\/.*//"
}

extls_prepare_sources()
{
	extls_printf "\n==========> PREPARING SOURCES TO BUILD <=========="
	extls_printf "* Clean Build Folder $BUILD_PREFIX"
	test -n $BUILD_PREFIX && rm -rf -- $BUILD_PREFIX
	mkdir -p $BUILD_PREFIX/sources && cd $BUILD_PREFIX || exit 1

	if test "x$SPACK_ALLOWED" = "xyes"; then
		extls_error "Spack is not supported yet."
	else

		binutils=`find $SOURCE_PREFIX/archives/ -name "binutils*"`
		gcc=`find $SOURCE_PREFIX/archives/ -name "gcc*"`
		gcc_dir=`__get_root_extract "$gcc"`
		gmp=`find $SOURCE_PREFIX/archives/ -name "gmp*"`
		gmp_dir=`__get_root_extract "$gmp"`
		mpfr=`find $SOURCE_PREFIX/archives/ -name "mpfr*"`
		mpfr_dir=`__get_root_extract "$mpfr"`
		mpc=`find $SOURCE_PREFIX/archives/ -name "mpc*"`
		mpc_dir=`__get_root_extract "$mpc"`

		tar -C $BUILD_PREFIX -xf $binutils
		tar -C $BUILD_PREFIX -xf $gcc
		tar -C $BUILD_PREFIX/$gcc_dir -xf $gmp 
		tar -C $BUILD_PREFIX/$gcc_dir -xf $gcc
		tar -C $BUILD_PREFIX/$gcc_dir -xf $gcc

		mv $BUILD_PREFIX/$gmp_dir $BUILD_PREFIX/gmp
		mv $BUILD_PREFIX/$mpfr_dir $BUILD_PREFIX/mpfr
		mv $BUILD_PREFIX/$mpc_dir $BUILD_PREFIX/mpc
	fi

	if test -n "`echo $MODE | grep -o "c"`" ; then
		for dep in `ls $ROOT_DIRECTORY/archives/*`
		do 
			cd $BUILD_PREFIX
			dep_name=`basename $dep | sed -e "s@.tar.*@@g"`
			extls_printf "* Uncompressing $dep_name"
			tar -xf $dep > .${dep_name}-untar.log 2>&1 || exit 1

			patch_name="${dep_name}.patch";
			patch="$ROOT_DIRECTORY/patches/${patch_name}"
			
			if test -f ${patch};
			then
				extls_printf "  + Patching with $patch_name"
				cd $dep_name
				patch -p1 < ${patch} > .${dep_name}-patch.log 2>&1 || exit 1
			fi
		done
	fi

}
extls_prepare_sources

extls_run()
{
	extls_printf "\n========> BUILDING EXTLS & DEPENDENCIES <========="
	mkdir -p $COMPILATION_PREFIX
	mkdir -p $RUNTIME_PREFIX

	cd $BUILD_PREFIX
	
	extls_set_default_deps

	cp $ROOT_DIRECTORY/.deps_run .
	sed -i \
		-e "s;@GMP_PREFIX_OPTION@;${GMP_PREFIX_OPTION};g" \
		-e "s;@MPFR_PREFIX_OPTION@;${MPFR_PREFIX_OPTION};g" \
		-e "s;@MPC_PREFIX_OPTION@;${MPC_PREFIX_OPTION};g" \
		-e "s;@HWLOC_PREFIX_OPTION@;${HWLOC_PREFIX_OPTION};g" \
		-e "s;@OPENPA_PREFIX_OPTION@;${OPENPA_PREFIX_OPTION};g" \
		$BUILD_PREFIX/.deps_run
	while read line
	do
		cd $BUILD_PREFIX
		echo $line | egrep "^[[:space:]]*(#|$)" > /dev/null
		if test $? = "0"
		then
			continue;
		fi
		cur_dep="`echo $line | cut -f1 -d';' | sed -e "s@ @@g"`"
		cur_dep_type="`echo $line | cut -f2 -d";"`"
		cur_dep_args="`echo $line | cut -f3 -d';'`"
		cur_dep_make_args="`echo $line | cut -f4 -d';'`"
		
		if test -z "`echo "$MODE" | grep -o "$cur_dep_type"`" ; then 
			continue;
		fi
		
		folder="`ls -d ${cur_dep}-*`"
		EXTRA_ARGS=""

		if test ! -d ${folder}; then exit 1; fi

		cd ${folder} || exit 1
		mkdir -p build && cd build

		if test "$cur_dep_type" = "c"; then
			EXTRA_ARGS="${EXTRA_ARGS} --prefix=${COMPILATION_PREFIX}"
		elif test "$cur_dep_type" = "r"; then
			EXTRA_ARGS="${EXTRA_ARGS} --prefix=${RUNTIME_PREFIX}"
		else
			exit 1
		fi

		if test "${DEBUG_MODE}" = "yes"; then
			EXTRA_ARGS="${EXTRA_ARGS} --enable-debug"
		fi
		
		if test "${COLOR_SUPPORT}" = "yes"; then
			EXTRA_ARGS="${EXTRA_ARGS} --enable-color"
		fi

		if test "$cur_dep" = "libextls";
		then
			CONFIGURE_PREFIX=${ROOT_DIRECTORY}/${cur_dep}
		elif test "$cur_dep" = "priv-plugin";
		then
			CONFIGURE_PREFIX=${ROOT_DIRECTORY}/${cur_dep}
		else
			CONFIGURE_PREFIX=${BUILD_PREFIX}/${folder}
		fi

		extls_printf "* Targeting $folder..."
		extls_printf "  + Configuring $folder"
		${CONFIGURE_PREFIX}/configure ${EXTRA_ARGS} ${cur_dep_args} > .extls-configure.log 2>&1 || extls_error "Error during build. Please read $BUILD_PREFIX/$folder/build/.extls-configure.log !"
		extls_printf "  + Building $folder"
		
		make -j${MAKE_J} ${cur_dep_make_args} > .extls-make.log 2>&1 || extls_error "Error during build. Please read $BUILD_PREFIX/$folder/build/.extls-make.log !"

		extls_printf "  + Installing $folder"
		make -j${MAKE_J} install > .extls-make-install.log 2>&1 || extls_error "Error during build. Please read $BUILD_PREFIX/$folder/build/.extls-make-install.log !"

	done < $BUILD_PREFIX/.deps_run
}
extls_run

extls_sourcing()
{
	cp $ROOT_DIRECTORY/tools/extls_vars.sh $BUILD_PREFIX/extls_vars.sh

	sed -i \
		-e "s;@COMPILATION_PREFIX@;${COMPILATION_PREFIX};g" \
		-e "s;@RUNTIME_PREFIX@;${RUNTIME_PREFIX};g" \
		$BUILD_PREFIX/extls_vars.sh
	
	echo 'export EXTLS_CFLAGS="-I$RUNTIME_PREFIX/include -DHAVE_ATOMICS -DHAVE_TOPOLOGY -DENABLE_HLS"' >> $BUILD_PREFIX/extls_vars.sh
	echo 'export EXTLS_LDFLAGS="-L$RUNTIME_PREFIX/lib -L/$RUNTIME_PREFIX/lib64 -Wl,-rpath=$RUNTIME_PREFIX/lib"' >> $BUILD_PREFIX/extls_vars.sh

	mkdir -p $RUNTIME_PREFIX/bin
	cp $BUILD_PREFIX/extls_vars.sh $RUNTIME_PREFIX/bin/extls_vars.sh

	extls_printf ""
	extls_printf "Building extls components: done !"
	extls_printf "You can now load the EXTLS environment by sourcing ${RUNTIME_PREFIX}/bin/extls_vars.sh"
}

extls_sourcing

