#!/bin/sh

#
# Script environment
#

SCRIPTPATH=$(dirname "$(readlink -f "$0")")

# First load all helper functions
if test -f "${SCRIPTPATH}/config/helper.sh"; then
	# shellcheck source=config/helper.sh
	. "${SCRIPTPATH}/config/helper.sh"
else
	echo "FATAL could not load ${SCRIPTPATH}/config/helper.sh"
fi

# Config FILES
SOURCES_CONF="${SCRIPTPATH}/config/sources.txt"
assert_file_exists "$SOURCES_CONF"

VARIANTS_CONF="${SCRIPTPATH}/config/variants.txt"
assert_file_exists "$VARIANTS_CONF"

VERSIONS_CONF="${SCRIPTPATH}/config/versions.txt"
assert_file_exists "$VERSIONS_CONF"

#
# All variables
#
PREFIX=""
GCC_VERSION=""
DISABLED_VARIANTS=""
ENABLED_VARIANTS=""
COMPILE_GCC="yes"
DOWNLOAD_ONLY="no"
CONTRIB_OPTIONS=""

#
# Argument parsing
#

help()
{
cat << EOF
$0 configure the mpc-compiler-additions projet and its variants

$0 --prefix=DIR [OPTS]

Supported variants are:
$(variant_list)

Supported GCC versions are:
$(gcc_version_list)

Options:
	--help		Show this help
	--prefix=XX     Where to install the package
	--gcc-version=  Version of GCC to deploy
	--opts="XX"     Option to be passed to contribs' configure
	-v|--verbose    Show verbose output
	--download      Only download dependencies
	--disable-gcc   Do not build the patched GCC
	--disable-[V]   Disable a given variant [V] (see Variants list)
	--enable-debug  Build in debug mode
	--enable-color  Enable output colors
EOF
}


for arg in "$@" ; do
		case $arg in
			-h|--help)
				help
				exit 0;
				;;
			-v|--verbose)
				SILENT="no"
				;;
			-f|--fake)
				FAKE_RUN="yes"
				;;
			--download)
				DOWNLOAD_ONLY="yes"
				;;
			--disable-gcc)
				COMPILE_GCC="no"
				;;
			--disable-*)
				D_VARIANT=$(echo "A$arg" | sed -e 's/A--disable-//g')
				variant_assert "${D_VARIANT}"
				DISABLED_VARIANTS=$(trim "${D_VARIANT} ${DISABLED_VARIANTS}")
				;;
			--prefix=*)
				PREFIX=$(echo "A$arg" | sed -e 's/A--prefix=//g')
				;;
			--enable-debug)
				CONTRIB_OPTIONS="--enable-debug ${CONTRIB_OPTIONS}"
			;;
			--enable-color)
				CONTRIB_OPTIONS="--enable-color ${CONTRIB_OPTIONS}"
			;;
			--opts=*)
				CONTRIB_OPTIONS=$(echo "A$arg" | sed -e 's/A--opts=//g' | xargs)
				;;
			--gcc-version=*)
				GCC_VERSION=$(echo "A$arg" | sed -e 's/A--gcc-version=//g')
				assert_gcc_version_known "${GCC_VERSION}"
				;;
			*)
				exit_error "No such option $arg see --help"
				;;
		esac
done

#
# Set defaults if needed
#
DEFAULT_GCC_VERSION="$(get_default_gcc_version)"

if test -z "${GCC_VERSION}"; then
	GCC_VERSION="${DEFAULT_GCC_VERSION}"
	echo "# GCC version not set with --gcc-version=X.X.X, using default ${GCC_VERSION}"
fi

#
# Download only
#
if test "x${DOWNLOAD_ONLY}" = "xyes"; then
	download_all_deps "$GCC_VERSION"
	exit 0
fi

#
# Variant Handling
#

ENABLED_VARIANTS=$(enabled_variants "${DISABLED_VARIANTS}")

if test "x${COMPILE_GCC}" = "xno"; then
	echo "# No GCC will be compiled (disabled with --disable-gcc)"
elif test -z "$ENABLED_VARIANTS"; then
	echo "# No variant enabled patched GCC not compiled"
else

	# Now check GCC support for each variant
	for v in $ENABLED_VARIANTS
	do
		if variant_supports_gcc_version "$v" "$GCC_VERSION"; then
			echo "# Enabling $v for gcc $GCC_VERSION"
		else
			# If the default version does not support the variant
			# Choose to disable by default if using default version
			if test "x${GCC_VERSION}" = "x${DEFAULT_GCC_VERSION}"; then
				echo "# Variant $v not supported by default GCC ${GCC_VERSION}"
				echo "# Disabling $v for gcc $GCC_VERSION"
				DISABLED_VARIANTS="${DISABLED_VARIANTS} $v"
			else
				exit_error "Variant $v is not compatible with gcc $GCC_VERSION (see config/variants.txt)"
			fi
		fi
	done

	# As we checked all the variants we update the enabled variants array
	#Â as they could have been skiped due to the default GCC version
	ENABLED_VARIANTS=$(enabled_variants "${DISABLED_VARIANTS}")

fi

if test -z "${PREFIX}"; then
	exit_error "No --prefix=XX argument passed."
else
	echo "# Prefix set to ${PREFIX}"
fi

#
# Clear Makefile
#
echo "" > ./Makefile

#
#
# GCC
#
#

if test "x${COMPILE_GCC}" = "xyes"; then

	# Prepare GCC's sources
	download_dep "gcc" "${GCC_VERSION}"
	GCC_TB="${TARBALL_PATH}"
	prepare_sources "${GCC_TB}" "gcc" "gcc" "${GCC_VERSION}"

	download_dep "binutils" "${GCC_VERSION}" 
	BINUTILS_TB="${TARBALL_PATH}"
	prepare_sources "${BINUTILS_TB}" "binutils" "binutils" "${GCC_VERSION}"

	# Following deps are to be extracted in GCC's sources

	for dep in mpc mpfr gmp isl
	do
		download_dep "$dep" "${GCC_VERSION}"
		prepare_sources "${TARBALL_PATH}" "./gcc/${dep}" "${dep}" "${GCC_VERSION}"
	done

	# Configure Binutils
	makefile_configure_package "binutils" "${PWD}/binutils/" "" "--prefix=$PREFIX"


	makefile_configure_package "gcc" "${PWD}/gcc/" "binutils" "--prefix=$PREFIX --enable-languages=c,c++,fortran --disable-multilib --disable-bootstrap --program-prefix=ap-"

	makefile_set_as_main_package "gcc"

fi
# END OF GCC

#
# AUTOPRIV DEPS
#
AUTOPRIV_DEPS=""
AUTOPRIV_DEPS_ARGS=""

if in_list "autopriv" "${ENABLED_VARIANTS}"; then

	# Now time to install AUTOPRIV's DEPS if needed

	for dep in hwloc openpa libelf
	do
		DEP_VERSION=$(package_version_for_gcc "$dep" "${GCC_VERSION}")

		if pkg-config --exists "$dep = ${DEP_VERSION}"; then
			echo "# $dep ${DEP_VERSION} found in environment."
		else
			download_dep "$dep" "${GCC_VERSION}"
			prepare_sources "${TARBALL_PATH}" "./$dep/" "$dep" "${GCC_VERSION}"
			makefile_configure_package "$dep" "${PWD}/$dep/" "" "--prefix=$PREFIX"
			AUTOPRIV_DEPS="$dep ${AUTOPRIV_DEPS}"
			AUTOPRIV_DEPS_ARGS="--with-${dep}=$PREFIX/ ${AUTOPRIV_DEPS_ARGS}"
		fi
	done
fi
#ENF OF AUTOPRIV DEPS



#
# Deploy all variant contribs (if enabled & present)
#

BUILT_VARIANTS=""

for variant in $ENABLED_VARIANTS
do
	EXTRA_ARGS=""
	VARIANT_DEPS=""

	case $variant in
		autopriv)
			VARIANT_DEPS="${AUTOPRIV_DEPS}"
			EXTRA_ARGS="${AUTOPRIV_DEPS_ARGS}"
			if test "x${COMPILE_GCC}" = "xyes"; then
				VARIANT_DEPS="gcc ${VARIANT_DEPS}"
				EXTRA_ARGS="${EXTRA_ARGS} CC=${PREFIX}/bin/ap-gcc CXX=${PREFIX}/bin/ap-g++ FC=${PREFIX}/bin/ap-gfortran CXXFLAGS='-I${PWD}/BUILD_gcc/gmp/'"
			fi
		;;
		workshare)
			if test "x${COMPILE_GCC}" = "xyes"; then
				VARIANT_DEPS="gcc"
				EXTRA_ARGS=" CC=${PREFIX}/bin/ap-gcc CXX=${PREFIX}/bin/ap-g++ FC=${PREFIX}/bin/ap-gfortran"
			else
				# Workshare has no meaning without patched GCC
				continue
			fi
		;;
	esac

	if test -d "${SCRIPTPATH}/src/${variant}/"; then
		makefile_configure_package "${variant}" "${SCRIPTPATH}/src/${variant}/" "${VARIANT_DEPS}" "--prefix=$PREFIX" ${CONTRIB_OPTIONS} ${EXTRA_ARGS}
		makefile_set_as_main_package "${variant}"
		BUILT_VARIANTS="$variant ${BUILT_VARIANTS}"
	fi
done

makefile_gen_check "${BUILT_VARIANTS}"

makefile_commit
